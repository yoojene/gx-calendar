/**
* This is an autogenerated file created by the Stencil compiler.
* It contains typing information for all components that exist in this project.
*/
/* tslint:disable */

import '@stencil/core';


import {
  CalendarEvent,
  MonthViewDay,
} from './model/gx-calendar';


export namespace Components {

  interface GxCalendarCell {
    'day': any;
    'locale': string;
    'onDayClick': (mouseEvent: MouseEvent, calendarEvent: CalendarEvent<any>) => void;
    'onEventClick': (mouseEvent: MouseEvent, calendarEvent: CalendarEvent<any>) => void;
    'openDay': MonthViewDay;
    'tooltipPlacement': string;
  }
  interface GxCalendarCellAttributes extends StencilHTMLAttributes {
    'day'?: any;
    'locale'?: string;
    'onDayClicked'?: (event: CustomEvent) => void;
    'onEventClicked'?: (event: CustomEvent) => void;
    'onHighlightDay'?: (event: CustomEvent) => void;
    'onShowTodaysEvents'?: (event: CustomEvent) => void;
    'onUnhighlightDay'?: (event: CustomEvent) => void;
    'openDay'?: MonthViewDay;
    'tooltipPlacement'?: string;
  }

  interface GxCalendarMonthView {
    /**
    * Visibility of previous and next month buttons
    */
    'customHeader': boolean;
    /**
    * An array of events to display on view TBC
    */
    'events': CalendarEvent[];
    /**
    * The locale used to format dates
    */
    'locale': string;
    'nextMonth': () => void;
    'prevMonth': () => void;
    'refreshBody': (date?: any) => void;
    'refreshEvents': () => void;
    'refreshHeader': () => void;
    /**
    * V or H to toggle vertical or horizontal scroll for calendar months
    */
    'scrolldir': any;
    'setUpGestures': () => void;
    'setViewDate': any;
    'setupWeeksToShow': () => void;
    /**
    * Visibility of previous and next month buttons
    */
    'shownavbuttons': boolean;
    /**
    * 4, 6, 7 or 8 to control number of rows (weeks) shown per month.  Default is 5
    */
    'weeksToShow': number;
  }
  interface GxCalendarMonthViewAttributes extends StencilHTMLAttributes {
    /**
    * Visibility of previous and next month buttons
    */
    'customHeader'?: boolean;
    /**
    * An array of events to display on view TBC
    */
    'events'?: CalendarEvent[];
    /**
    * The locale used to format dates
    */
    'locale'?: string;
    /**
    * Called when the day cell is pressed
    */
    'onDayPressed'?: (event: CustomEvent) => void;
    /**
    * Called when the event title is clicked
    */
    'onEventClicked'?: (event: CustomEvent) => void;
    /**
    * Called when an event is dragged and dropped
    */
    'onEventTimesChanged'?: (event: CustomEvent) => void;
    /**
    * Called when month is moved forward in time
    */
    'onMonthChangeFuture'?: (event: CustomEvent) => void;
    /**
    * Called when month is moved back in time
    */
    'onMonthChangePast'?: (event: CustomEvent) => void;
    /**
    * Called when the month day cell is clicked
    */
    'onMonthDayClicked'?: (event: CustomEvent) => void;
    /**
    * Displays current days' events
    */
    'onTodaysCalendarEvents'?: (event: CustomEvent) => void;
    /**
    * V or H to toggle vertical or horizontal scroll for calendar months
    */
    'scrolldir'?: any;
    'setViewDate'?: any;
    /**
    * Visibility of previous and next month buttons
    */
    'shownavbuttons'?: boolean;
    /**
    * 4, 6, 7 or 8 to control number of rows (weeks) shown per month.  Default is 5
    */
    'weeksToShow'?: number;
  }

  interface MyComponent {
    'first': string;
    'last': string;
  }
  interface MyComponentAttributes extends StencilHTMLAttributes {
    'first'?: string;
    'last'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'GxCalendarCell': Components.GxCalendarCell;
    'GxCalendarMonthView': Components.GxCalendarMonthView;
    'MyComponent': Components.MyComponent;
  }

  interface StencilIntrinsicElements {
    'gx-calendar-cell': Components.GxCalendarCellAttributes;
    'gx-calendar-month-view': Components.GxCalendarMonthViewAttributes;
    'my-component': Components.MyComponentAttributes;
  }


  interface HTMLGxCalendarCellElement extends Components.GxCalendarCell, HTMLStencilElement {}
  var HTMLGxCalendarCellElement: {
    prototype: HTMLGxCalendarCellElement;
    new (): HTMLGxCalendarCellElement;
  };

  interface HTMLGxCalendarMonthViewElement extends Components.GxCalendarMonthView, HTMLStencilElement {}
  var HTMLGxCalendarMonthViewElement: {
    prototype: HTMLGxCalendarMonthViewElement;
    new (): HTMLGxCalendarMonthViewElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLElementTagNameMap {
    'gx-calendar-cell': HTMLGxCalendarCellElement
    'gx-calendar-month-view': HTMLGxCalendarMonthViewElement
    'my-component': HTMLMyComponentElement
  }

  interface ElementTagNameMap {
    'gx-calendar-cell': HTMLGxCalendarCellElement;
    'gx-calendar-month-view': HTMLGxCalendarMonthViewElement;
    'my-component': HTMLMyComponentElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
